
"use client";
import React, { useState, useRef, useEffect } from 'react';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetFooter,
} from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { aiStudyAssistant } from '@/ai/flows/ai-study-assistant';
import type { AIStudyAssistantOutput } from '@/ai/flows/ai-study-assistant';
import { Bot, User, PlusCircle, Loader2, BrainCircuit } from 'lucide-react';
import { useStudyData } from '@/hooks/use-study-data';
import { useToast } from '@/hooks/use-toast';
import { v4 as uuidv4 } from 'uuid'; // Need to add uuid package

interface Message {
  id: string;
  role: 'user' | 'assistant';
  text: string;
  suggestions?: AIStudyAssistantOutput['suggestedFlashcards'];
  originalQuery?: string; // For assistant messages, to allow simplification
  isSimplified?: boolean;
}

export function AiAssistantSheet({ open, onOpenChange }: { open: boolean; onOpenChange: (open: boolean) => void }) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { addDeck, subjects, incrementAiQuestionsCount } = useStudyData();
  const { toast } = useToast();

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTo({ top: scrollAreaRef.current.scrollHeight, behavior: 'smooth' });
    }
  }, [messages]);
  
  const callAI = async (query: string, simplify: boolean = false) => {
    setIsLoading(true);
    incrementAiQuestionsCount();

    try {
      const assistantResponse = await aiStudyAssistant({ query, simplify });
      const assistantMessage: Message = {
        id: uuidv4(),
        role: 'assistant',
        text: assistantResponse.response,
        suggestions: assistantResponse.suggestedFlashcards,
        originalQuery: simplify ? undefined : query, // Only add original query to non-simplified answers
        isSimplified: simplify,
      };
      setMessages((prev) => [...prev, assistantMessage]);
    } catch (error) {
      console.error('AI Study Assistant Error:', error);
      const errorMessage: Message = {
        id: uuidv4(),
        role: 'assistant',
        text: 'Sorry, I encountered an error. Please try again.',
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  }

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = { id: uuidv4(), role: 'user', text: inputValue };
    setMessages((prev) => [...prev, userMessage]);
    const query = inputValue;
    setInputValue('');
    await callAI(query, false);
  };
  
  const handleSimplify = async (originalQuery?: string) => {
    if (!originalQuery || isLoading) return;
    
    const userMessage: Message = { id: uuidv4(), role: 'user', text: "Can you explain that more simply?" };
    setMessages((prev) => [...prev, userMessage]);
    
    await callAI(originalQuery, true);
  }
  
  const handleAddFlashcards = (flashcards: AIStudyAssistantOutput['suggestedFlashcards'], query?: string) => {
    if (subjects.length === 0) {
      toast({
        title: "No Subject Found",
        description: "Please create a subject first before saving flashcards.",
        variant: "destructive",
      });
      return;
    }
    // For simplicity, we'll add to the first subject. A better implementation would ask the user.
    const subjectId = subjects[0].id;
    const topicName = query ? (query.length > 50 ? query.substring(0, 47) + '...' : query) : "AI Assistant Deck";

    addDeck({
        subjectId: subjectId,
        topic: topicName,
        summary: `Flashcards generated by AI assistant for the query: "${topicName}"`,
        flashcards: flashcards,
    });

    toast({
      title: "Flashcard Deck Added!",
      description: `${flashcards.length} new flashcards saved to deck '${topicName}' in '${subjects[0].name}'.`,
    });
  };

  return (
    <Sheet open={open} onOpenChange={onOpenChange}>
      <SheetContent className="flex flex-col w-full sm:max-w-lg">
        <SheetHeader>
          <SheetTitle>AI Study Assistant</SheetTitle>
          <SheetDescription>
            Ask for explanations, summaries, or examples. I'm here to help!
          </SheetDescription>
        </SheetHeader>
        <ScrollArea className="flex-1 pr-4 -mr-4" ref={scrollAreaRef}>
          <div className="space-y-4 py-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex items-start gap-3 ${message.role === 'user' ? 'justify-end' : ''}`}>
                {message.role === 'assistant' && <Bot className="h-6 w-6 text-primary flex-shrink-0" />}
                <div className={`rounded-lg p-3 max-w-sm ${
                    message.role === 'user'
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-muted'
                  }`}
                >
                  <p className="text-sm whitespace-pre-wrap">{message.text}</p>
                   {message.role === 'assistant' && !message.isSimplified && (
                    <div className="mt-3 flex flex-wrap gap-2">
                      {message.suggestions && message.suggestions.length > 0 && (
                        <Button variant="secondary" size="sm" onClick={() => handleAddFlashcards(message.suggestions!, message.originalQuery)}>
                          <PlusCircle className="mr-2 h-4 w-4" />
                          Save as Flashcards
                        </Button>
                      )}
                      {message.originalQuery && (
                         <Button variant="secondary" size="sm" onClick={() => handleSimplify(message.originalQuery)}>
                            <BrainCircuit className="mr-2 h-4 w-4" />
                            Simplify this
                        </Button>
                      )}
                    </div>
                  )}
                </div>
                {message.role === 'user' && <User className="h-6 w-6 text-primary flex-shrink-0" />}
              </div>
            ))}
             {isLoading && (
              <div className="flex items-start gap-3">
                <Bot className="h-6 w-6 text-primary flex-shrink-0" />
                <div className="rounded-lg p-3 bg-muted flex items-center">
                  <Loader2 className="h-5 w-5 animate-spin text-primary" />
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
        <SheetFooter>
          <form onSubmit={handleSendMessage} className="w-full flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Ask me anything..."
              disabled={isLoading}
            />
            <Button type="submit" disabled={isLoading}>
              Send
            </Button>
          </form>
        </SheetFooter>
      </SheetContent>
    </Sheet>
  );
}
